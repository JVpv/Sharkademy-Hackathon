CREATE TABLE customer (
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY, 
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100),
    phone_number VARCHAR2(15),
    created_at DATE DEFAULT SYSDATE,
    PRIMARY KEY (customer_id)
);

BEGIN
    INSERT INTO customer (first_name, last_name, email, phone_number)
    VALUES ('John', 'Doe', 'john.doe@example.com', '555-1234');

    INSERT INTO customer (first_name, last_name, email, phone_number)
    VALUES ('Jane', 'Smith', 'jane.smith@example.com', '555-5678');

    INSERT INTO customer (first_name, last_name, email, phone_number)
    VALUES ('Alice', 'Johnson', 'alice.johnson@example.com', '555-8765');
    
    COMMIT;
END;


CREATE TABLE parking_spot (
    spot_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    spot_number VARCHAR2(10) NOT NULL,   -- Unique number or identifier for the parking spot
    location VARCHAR2(100),              -- Physical location (e.g., section or floor)
    is_available CHAR(1) DEFAULT 'Y',    -- 'Y' if available, 'N' if occupied
    PRIMARY KEY (spot_id)
);


CREATE TABLE reservation (
    reservation_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    customer_id NUMBER,                    -- Foreign key to customer table
    spot_id NUMBER,                        -- Foreign key to parking_spot table
    start_time DATE,                       -- When the reservation starts
    end_time DATE,                         -- When the reservation ends
    created_at DATE DEFAULT SYSDATE,       -- When the reservation was made
    status VARCHAR2(20) DEFAULT 'Active',  -- Status (e.g., Active, Cancelled, Completed)
    PRIMARY KEY (reservation_id),
    CONSTRAINT fk_customer
      FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
    CONSTRAINT fk_spot
      FOREIGN KEY (spot_id) REFERENCES parking_spot(spot_id)
);

CREATE TABLE payment (
    payment_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    reservation_id NUMBER,                 -- Foreign key to reservation table
    amount NUMBER(10, 2),                  -- Amount paid
    payment_date DATE DEFAULT SYSDATE,     -- Date of payment
    PRIMARY KEY (payment_id),
    CONSTRAINT fk_reservation
      FOREIGN KEY (reservation_id) REFERENCES reservation(reservation_id)
);


BEGIN
    UPDATE parking_spot
    SET is_available = 'N'
    WHERE spot_id = 1; -- Replace with the actual spot_id being reserved
    
    COMMIT;
END;


BEGIN
    UPDATE parking_spot
    SET is_available = 'Y'
    WHERE spot_id = 2; -- Replace with the actual spot_id
    
    UPDATE reservation
    SET status = 'Completed'
    WHERE reservation_id = 1; -- Replace with the actual reservation_id
    
    COMMIT;

select * from parking_spot (
